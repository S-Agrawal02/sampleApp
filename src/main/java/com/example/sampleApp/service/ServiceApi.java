/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.sampleApp.service;

import com.example.sampleApp.classes.ErrorRes;
import com.example.sampleApp.classes.ServiceCriteria;
import com.example.sampleApp.model.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-15T14:07:18.485373500+05:30[Asia/Calcutta]")

@Validated
@Api(value = "service", description = "the service API")
@RestController
public interface ServiceApi {

    default ServiceApiDelegate getDelegate() {
        return new ServiceApiDelegate() {};
    }

    @ApiOperation(value = "", nickname = "createServiceDefinition", notes = "", response = ServiceDefinitionResponse.class, tags={ "My Controller Class", })
    @PostMapping("/createServiceDefinition")
    default ServiceDefinitionResponse createServiceDefinition() throws IOException, ParseException {
        ServiceDefinitionRequest serviceDefinitionRequest = new ServiceDefinitionRequest();
        ServiceDefinitionResponse response = getDelegate().serviceDefinitionV1CreatePost(serviceDefinitionRequest);
        return response;
    }

    @ApiOperation(value = "", nickname = "searchServiceDefinition", notes = "", response = ServiceDefinitionResponse.class, tags={ "My Controller Class", })
    @GetMapping("/searchServiceDefinition")
    default ServiceDefinitionResponse searchServiceDefinition(@RequestParam(value = "id", defaultValue = "101") String id)
             throws IOException, ParseException {
      ServiceDefinitionSearchRequest serviceDefinitionSearchRequest = new ServiceDefinitionSearchRequest();
      ServiceDefinitionCriteria serviceDefinitionCriteria = new ServiceDefinitionCriteria();
      serviceDefinitionCriteria.setClientId(id);
      serviceDefinitionSearchRequest.setServiceDefinitionCriteria(serviceDefinitionCriteria);
      ServiceDefinitionResponse response = getDelegate().serviceDefinitionV1SearchPost(serviceDefinitionSearchRequest);

      return response;
    }

    /**
     * POST /service/definition/v1/_create
     *
     * @param serviceDefinitionRequest  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceDefinitionV1CreatePost", notes = "", response = ServiceDefinitionResponse.class, tags={ "Service Definition", })
    @RequestMapping(value = "/service/definition/v1/_create",method = RequestMethod.POST)
    default ServiceDefinitionResponse serviceDefinitionV1CreatePost(@ApiParam(value = "")  @Valid @RequestBody(required = false) ServiceDefinitionRequest serviceDefinitionRequest) {
        return getDelegate().serviceDefinitionV1CreatePost(serviceDefinitionRequest);
    }

    /**
     * POST /service/definition/v1/_search
     *
     * @param serviceDefinitionSearchRequest  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceDefinitionV1SearchPost", notes = "", response = ServiceDefinitionResponse.class, tags={ "Service Definition", })
    @RequestMapping(value = "/service/definition/v1/_search", method = RequestMethod.POST)
    @ResponseBody
    default ServiceDefinitionResponse serviceDefinitionV1SearchPost(@RequestBody ServiceDefinitionSearchRequest serviceDefinitionSearchRequest) {
        return getDelegate().serviceDefinitionV1SearchPost(serviceDefinitionSearchRequest);
    }

// ----------------------------------------------------------
    /**
     * POST /service/v1/_create
     *
     * @param serviceRequest  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceV1CreatePost", notes = "", response = ServiceResponse.class, tags={ "Service", })
    @RequestMapping(value = "/service/v1/_create", method = RequestMethod.POST)
    default ServiceResponse serviceV1CreatePost(@ApiParam(value = "")  @Valid @RequestBody(required = false) ServiceRequest serviceRequest) {
        return getDelegate().serviceV1CreatePost(serviceRequest);
    }
    
    /**
     * POST /service/v1/_search
     *
     * @param serviceSearchRequest  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceV1SearchPost", notes = "", response = ServiceResponse.class, tags={ "Service", })
    @RequestMapping(value = "/service/v1/_search", method = RequestMethod.POST)
    @ResponseBody
    default ServiceResponse serviceV1SearchPost(@RequestBody ServiceSearchRequest serviceSearchRequest) {
        return getDelegate().serviceV1SearchPost(serviceSearchRequest);
    }

    /**
     * POST /service/v1/_searches
     *
     * @param List<serviceSearchRequest>  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceV1SearchPosts", notes = "", response = ServiceResponse.class, tags={ "Service", })
    @RequestMapping(value = "/service/v1/_searches", method = RequestMethod.POST)
    @ResponseBody
    default List<ServiceResponse> serviceV1SearchPosts(@RequestBody List<ServiceSearchRequest> serviceSearchRequests) {
        List<ServiceResponse> serviceResponses = new ArrayList<>();
        for(ServiceSearchRequest serviceSearchRequest : serviceSearchRequests)
            serviceResponses.add(getDelegate().serviceV1SearchPost(serviceSearchRequest));
        return serviceResponses;
    }

}
